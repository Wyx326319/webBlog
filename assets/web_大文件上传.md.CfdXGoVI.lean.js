import{_ as e,c as s,a2 as t,o as i}from"./chunks/framework.BQmytedh.js";const u=JSON.parse('{"title":"大文件上传","description":"","frontmatter":{},"headers":[],"relativePath":"web/大文件上传.md","filePath":"web/大文件上传.md","lastUpdated":1751384237000}'),l={name:"web/大文件上传.md"};function n(o,a,h,d,p,c){return i(),s("div",null,a[0]||(a[0]=[t(`<h1 id="大文件上传" tabindex="-1">大文件上传 <a class="header-anchor" href="#大文件上传" aria-label="Permalink to &quot;大文件上传&quot;">​</a></h1><p>大文件上传是前端领域中常见的需求，下面是我模仿阿里云的文件上传，阿里云的文件上传几乎 包含了文件上传的所有内容，非常值得学习!</p><p>实现的大致思路:</p><pre><code>1. 通过拖拽api实现文件的拖拽，并拿到相应的文件
2. 实现拖拽文件夹的功能，可以将整个文件夹中的文件一起上传
3. 拿到所有的文件，就可以进行分片了
4. 分片后计算分片的hash值，调用后端接口上传分片
5. 上传完毕后通知后端进行合并。
</code></pre><p>大文件上传所需要了解的所有前置知识:</p><ol><li>拖拽Api</li><li>如何选择文件夹，并兼容各个浏览器</li><li>如何获取文件夹中的文件</li><li>如何进行分片</li><li>如何读取文件内容并计算文件的hash值(递归) ---如何处理异步代码</li><li>如何确保文件分片上传完毕通知后端</li></ol><h3 id="_1-拖拽api" tabindex="-1">1. 拖拽Api <a class="header-anchor" href="#_1-拖拽api" aria-label="Permalink to &quot;1. 拖拽Api&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="_2-选择文件夹-并适配各个浏览器" tabindex="-1">2. 选择文件夹，并适配各个浏览器 <a class="header-anchor" href="#_2-选择文件夹-并适配各个浏览器" aria-label="Permalink to &quot;2. 选择文件夹，并适配各个浏览器&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="_3-如何获取文件夹中的文件" tabindex="-1">3. 如何获取文件夹中的文件 <a class="header-anchor" href="#_3-如何获取文件夹中的文件" aria-label="Permalink to &quot;3. 如何获取文件夹中的文件&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="_4-分片" tabindex="-1">4. 分片 <a class="header-anchor" href="#_4-分片" aria-label="Permalink to &quot;4. 分片&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="_5-计算文件hash值" tabindex="-1">5. 计算文件hash值 <a class="header-anchor" href="#_5-计算文件hash值" aria-label="Permalink to &quot;5. 计算文件hash值&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="_6-通知后端" tabindex="-1">6. 通知后端 <a class="header-anchor" href="#_6-通知后端" aria-label="Permalink to &quot;6. 通知后端&quot;">​</a></h3>`,17)]))}const b=e(l,[["render",n]]);export{u as __pageData,b as default};
